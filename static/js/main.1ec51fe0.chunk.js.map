{"version":3,"sources":["BooksAPI.js","components/CurrentlyReading.js","components/WantToRead.js","components/AlreadyRead.js","components/BookList.js","components/SearchPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","CurrentlyReading","props","items","action","className","map","item","key","id","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","e","target","value","disabled","title","authors","WantToRead","AlreadyRead","BookList","books","changeShelf","filter","book","shelf","to","SearchPage","type","placeholder","BooksApp","console","log","fetch","method","body","JSON","stringify","then","res","json","booksAPI","state","data","setState","this","length","exact","path","render","React","Component","ReactDOM","document","getElementById"],"mappings":"uRACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACd,OAAU,mBACV,cAAiBN,G,eC0CJO,EAnDU,SAACC,GAAW,IAC3BC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OAEf,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,mBAAd,qBACA,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,cACXF,EAAMG,KAAI,SAACC,GACV,OACE,wBAAIC,IAAKD,EAAKE,IACZ,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,YACb,yBACEA,UAAU,aACVK,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAgB,QAAD,OAAUN,EAAKO,WAAWC,UAA1B,SAGnB,yBAAKV,UAAU,sBACb,4BACEW,SAAU,SAACC,GACTb,EAAOG,EAAMU,EAAEC,OAAOC,SAGxB,4BAAQA,MAAM,OAAOC,UAAQ,GAA7B,cAGA,4BAAQD,MAAM,oBAAd,qBAGA,4BAAQA,MAAM,cAAd,gBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,WAIN,yBAAKd,UAAU,cAAcE,EAAKc,OAClC,yBAAKhB,UAAU,gBAAgBE,EAAKe,kBCWvCC,EAnDI,SAACrB,GAAW,IACrBC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OAEf,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,mBAAd,gBACA,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,cACXF,EAAMG,KAAI,SAACC,GACV,OACE,wBAAIC,IAAKD,EAAKE,IACZ,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,YACb,yBACEA,UAAU,aACVK,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAgB,QAAD,OAAUN,EAAKO,WAAWC,UAA1B,SAGnB,yBAAKV,UAAU,sBACb,4BACEW,SAAU,SAACC,GACTb,EAAOG,EAAMU,EAAEC,OAAOC,SAGxB,4BAAQA,MAAM,OAAOC,UAAQ,GAA7B,cAGA,4BAAQD,MAAM,oBAAd,qBAGA,4BAAQA,MAAM,cAAd,gBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,WAIN,yBAAKd,UAAU,cAAcE,EAAKc,OAClC,yBAAKhB,UAAU,gBAAgBE,EAAKe,kBCWvCE,EAnDK,SAACtB,GAAW,IACtBC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OAEf,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,mBAAd,QACA,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,cACXF,EAAMG,KAAI,SAACC,GACV,OACE,wBAAIC,IAAKD,EAAKE,IACZ,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,YACb,yBACEA,UAAU,aACVK,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAgB,QAAD,OAAUN,EAAKO,WAAWC,UAA1B,SAGnB,yBAAKV,UAAU,sBACb,4BACEW,SAAU,SAACC,GACTb,EAAOG,EAAMU,EAAEC,OAAOC,SAGxB,4BAAQA,MAAM,OAAOC,UAAQ,GAA7B,cAGA,4BAAQD,MAAM,oBAAd,qBAGA,4BAAQA,MAAM,cAAd,gBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,WAIN,yBAAKd,UAAU,cAAcE,EAAKc,OAClC,yBAAKhB,UAAU,gBAAgBE,EAAKe,kBCLvCG,EAhCE,SAACvB,GAAW,IACnBwB,EAAuBxB,EAAvBwB,MAAOC,EAAgBzB,EAAhByB,YACf,OACE,yBAAKtB,UAAU,cACb,yBAAKA,UAAU,oBACb,wCAEF,yBAAKA,UAAU,sBACb,6BACE,kBAAC,EAAD,CACEF,MAAOuB,EAAME,QAAO,SAACC,GAAD,MAAyB,qBAAfA,EAAKC,SACnC1B,OAAQuB,IAEV,kBAAC,EAAD,CACExB,MAAOuB,EAAME,QAAO,SAACC,GAAD,MAAyB,eAAfA,EAAKC,SACnC1B,OAAQuB,IAEV,kBAAC,EAAD,CACExB,MAAOuB,EAAME,QAAO,SAACC,GAAD,MAAyB,SAAfA,EAAKC,SACnC1B,OAAQuB,MAId,yBAAKtB,UAAU,eACb,kBAAC,IAAD,CAAM0B,GAAG,WACP,kDCAKC,EA3BI,WACjB,OACE,yBAAK3B,UAAU,gBACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAM0B,GAAG,KACP,4BAAQ1B,UAAU,gBAAlB,UAGF,yBAAKA,UAAU,8BASb,2BAAO4B,KAAK,OAAOC,YAAY,gCAGnC,yBAAK7B,UAAU,wBACb,wBAAIA,UAAU,kB,eC2BP8B,E,kDA1Cb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAeRyB,YAAc,SAACE,EAAMC,GACnBM,QAAQC,IAAIR,EAAKR,MAAQ,KAAOS,GNFd,SAACD,EAAMC,GAC3BQ,MAAM,GAAD,OAAI7C,EAAJ,kBAAiBoC,EAAKpB,IAAM,CAC/B8B,OAAQ,MACRvC,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElBwC,KAAMC,KAAKC,UAAU,CAAEZ,YACtBa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UMJjBC,CAAgBjB,EAAMC,IAhBtB,EAAKiB,MAAQ,CACXrB,MAAO,IAJQ,E,gEAQE,IAAD,ONGpBY,MAAM,GAAD,OAAI7C,EAAJ,UAAiB,CAAEO,YACrB2C,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAK,GAAI,OAAIA,EAAKtB,SMJDiB,MAAK,SAACjB,GACtB,EAAKuB,UAAS,iBAAO,CACnBvB,MAAOA,W,+BAWH,IAAD,OACP,OAAmC,IAA5BwB,KAAKH,MAAMrB,MAAMyB,OACtB,yBAAK9C,UAAU,OACb,kBAAC,IAAD,CACE+C,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,kBAAC,EAAD,CAAU5B,MAAO,EAAKqB,MAAMrB,MAAOC,YAAa,EAAKA,iBAGzD,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,UAG5C,yBAAKjD,UAAU,OACb,kBAAC,gBAAD,W,GArCekD,IAAMC,W,MCF7BC,IAASH,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFI,SAASC,eAAe,W","file":"static/js/main.1ec51fe0.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from \"react\";\r\n\r\nconst CurrentlyReading = (props) => {\r\n  const { items, action } = props;\r\n\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {items.map((item) => {\r\n            return (\r\n              <li key={item.id}>\r\n                <div className=\"book\">\r\n                  <div className=\"book-top\">\r\n                    <div\r\n                      className=\"book-cover\"\r\n                      style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: `url(\"${item.imageLinks.thumbnail}\")`,\r\n                      }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                      <select\r\n                        onChange={(e) => {\r\n                          action(item, e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"move\" disabled>\r\n                          Move to...\r\n                        </option>\r\n                        <option value=\"currentlyReading\">\r\n                          Currently Reading\r\n                        </option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"book-title\">{item.title}</div>\r\n                  <div className=\"book-authors\">{item.authors}</div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentlyReading;\r\n","import React from \"react\";\r\n\r\nconst WantToRead = (props) => {\r\n  const { items, action } = props;\r\n\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {items.map((item) => {\r\n            return (\r\n              <li key={item.id}>\r\n                <div className=\"book\">\r\n                  <div className=\"book-top\">\r\n                    <div\r\n                      className=\"book-cover\"\r\n                      style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: `url(\"${item.imageLinks.thumbnail}\")`,\r\n                      }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                      <select\r\n                        onChange={(e) => {\r\n                          action(item, e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"move\" disabled>\r\n                          Move to...\r\n                        </option>\r\n                        <option value=\"currentlyReading\">\r\n                          Currently Reading\r\n                        </option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"book-title\">{item.title}</div>\r\n                  <div className=\"book-authors\">{item.authors}</div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WantToRead;\r\n","import React from \"react\";\r\n\r\nconst AlreadyRead = (props) => {\r\n  const { items, action } = props;\r\n\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">Read</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {items.map((item) => {\r\n            return (\r\n              <li key={item.id}>\r\n                <div className=\"book\">\r\n                  <div className=\"book-top\">\r\n                    <div\r\n                      className=\"book-cover\"\r\n                      style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: `url(\"${item.imageLinks.thumbnail}\")`,\r\n                      }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                      <select\r\n                        onChange={(e) => {\r\n                          action(item, e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"move\" disabled>\r\n                          Move to...\r\n                        </option>\r\n                        <option value=\"currentlyReading\">\r\n                          Currently Reading\r\n                        </option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"book-title\">{item.title}</div>\r\n                  <div className=\"book-authors\">{item.authors}</div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlreadyRead;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CurrentlyReading from \"./CurrentlyReading\";\r\nimport WantToRead from \"./WantToRead\";\r\nimport AlreadyRead from \"./AlreadyRead\";\r\nconst BookList = (props) => {\r\n  const { books, changeShelf } = props;\r\n  return (\r\n    <div className=\"list-books\">\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          <CurrentlyReading\r\n            items={books.filter((book) => book.shelf === \"currentlyReading\")}\r\n            action={changeShelf}\r\n          />\r\n          <WantToRead\r\n            items={books.filter((book) => book.shelf === \"wantToRead\")}\r\n            action={changeShelf}\r\n          />\r\n          <AlreadyRead\r\n            items={books.filter((book) => book.shelf === \"read\")}\r\n            action={changeShelf}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"open-search\">\r\n        <Link to=\"/search\">\r\n          <button>Add a book</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SearchPage = () => {\r\n  return (\r\n    <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <Link to=\"/\">\r\n          <button className=\"close-search\">Close</button>\r\n        </Link>\r\n\r\n        <div className=\"search-books-input-wrapper\">\r\n          {/*\r\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n              You can find these search terms here:\r\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n              you don't find a specific author or title. Every search is limited by search terms.\r\n            */}\r\n          <input type=\"text\" placeholder=\"Search by title or author\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\"></ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n","import React from \"react\";\r\nimport * as booksAPI from \"./BooksAPI\";\r\nimport \"./App.css\";\r\nimport BookList from \"./components/BookList\";\r\nimport SearchPage from \"./components/SearchPage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { CoffeeLoading } from \"react-loadingg\";\r\n\r\nclass BooksApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      books: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    booksAPI.getAll().then((books) => {\r\n      this.setState(() => ({\r\n        books: books,\r\n      }));\r\n    });\r\n  }\r\n\r\n  changeShelf = (book, shelf) => {\r\n    console.log(book.title + \"  \" + shelf);\r\n\r\n    booksAPI.update(book, shelf);\r\n  };\r\n\r\n  render() {\r\n    return this.state.books.length !== 0 ? (\r\n      <div className=\"app\">\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <BookList books={this.state.books} changeShelf={this.changeShelf} />\r\n          )}\r\n        />\r\n        <Route exact path=\"/search\" render={() => <SearchPage />} />\r\n      </div>\r\n    ) : (\r\n      <div className=\"app\">\r\n        <CoffeeLoading />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}