{"version":3,"sources":["BooksAPI.js","components/CurrentlyReading.js","components/WantToRead.js","components/AlreadyRead.js","components/BookList.js","components/SearchPage.js","App.js","utils/shelfNames.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","CurrentlyReading","props","items","action","className","map","item","key","id","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","e","shelf","target","value","disabled","title","authors","WantToRead","AlreadyRead","BookList","books","changeShelf","currentlyReading","wantToRead","read","to","SearchPage","type","placeholder","BooksApp","selectedBook","prevShelf","newShelf","book","newState","Object","assign","state","find","filter","setState","fetch","method","body","JSON","stringify","then","res","json","data","resBooks","this","length","exact","path","render","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4ab8d398.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token;\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n","import React from \"react\";\r\n\r\nconst CurrentlyReading = (props) => {\r\n  const { items, action } = props;\r\n\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {items.map((item) => {\r\n            return (\r\n              <li key={item.id}>\r\n                <div className=\"book\">\r\n                  <div className=\"book-top\">\r\n                    <div\r\n                      className=\"book-cover\"\r\n                      style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: `url(\"${item.imageLinks.thumbnail}\")`,\r\n                      }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                      <select\r\n                        onChange={(e) => {\r\n                          action(item, item.shelf, e.target.value);\r\n                        }}\r\n                        value={item.shelf}\r\n                      >\r\n                        <option value=\"move\" disabled>\r\n                          Move to...\r\n                        </option>\r\n                        <option value=\"currentlyReading\">\r\n                          Currently Reading\r\n                        </option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"book-title\">{item.title}</div>\r\n                  <div className=\"book-authors\">{item.authors}</div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentlyReading;\r\n","import React from \"react\";\r\n\r\nconst WantToRead = (props) => {\r\n  const { items, action } = props;\r\n\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {items.map((item) => {\r\n            return (\r\n              <li key={item.id}>\r\n                <div className=\"book\">\r\n                  <div className=\"book-top\">\r\n                    <div\r\n                      className=\"book-cover\"\r\n                      style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: `url(\"${item.imageLinks.thumbnail}\")`,\r\n                      }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                      <select\r\n                        onChange={(e) => {\r\n                          action(item, item.shelf, e.target.value);\r\n                        }}\r\n                        value={item.shelf}\r\n                      >\r\n                        <option value=\"move\" disabled>\r\n                          Move to...\r\n                        </option>\r\n                        <option value=\"currentlyReading\">\r\n                          Currently Reading\r\n                        </option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"book-title\">{item.title}</div>\r\n                  <div className=\"book-authors\">{item.authors}</div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WantToRead;\r\n","import React from \"react\";\r\n\r\nconst AlreadyRead = (props) => {\r\n  const { items, action } = props;\r\n\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">Read</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {items.map((item) => {\r\n            return (\r\n              <li key={item.id}>\r\n                <div className=\"book\">\r\n                  <div className=\"book-top\">\r\n                    <div\r\n                      className=\"book-cover\"\r\n                      style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: `url(\"${item.imageLinks.thumbnail}\")`,\r\n                      }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                      <select\r\n                        onChange={(e) => {\r\n                          action(item, item.shelf, e.target.value);\r\n                        }}\r\n                        value={item.shelf}\r\n                      >\r\n                        <option value=\"move\" disabled>\r\n                          Move to...\r\n                        </option>\r\n                        <option value=\"currentlyReading\">\r\n                          Currently Reading\r\n                        </option>\r\n                        <option value=\"wantToRead\">Want to Read</option>\r\n                        <option value=\"read\">Read</option>\r\n                        <option value=\"none\">None</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"book-title\">{item.title}</div>\r\n                  <div className=\"book-authors\">{item.authors}</div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlreadyRead;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CurrentlyReading from \"./CurrentlyReading\";\r\nimport WantToRead from \"./WantToRead\";\r\nimport AlreadyRead from \"./AlreadyRead\";\r\nconst BookList = (props) => {\r\n  const { books, changeShelf } = props;\r\n\r\n  return (\r\n    <div className=\"list-books\">\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          <CurrentlyReading\r\n            items={books.currentlyReading}\r\n            action={changeShelf}\r\n          />\r\n          <WantToRead items={books.wantToRead} action={changeShelf} />\r\n          <AlreadyRead items={books.read} action={changeShelf} />\r\n        </div>\r\n      </div>\r\n      <div className=\"open-search\">\r\n        <Link to=\"/search\">\r\n          <button>Add a book</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SearchPage = () => {\r\n  return (\r\n    <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <Link to=\"/\">\r\n          <button className=\"close-search\">Close</button>\r\n        </Link>\r\n\r\n        <div className=\"search-books-input-wrapper\">\r\n          {/*\r\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n              You can find these search terms here:\r\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n              you don't find a specific author or title. Every search is limited by search terms.\r\n            */}\r\n          <input type=\"text\" placeholder=\"Search by title or author\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\"></ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n","import React from \"react\";\r\nimport * as booksAPI from \"./BooksAPI\";\r\nimport \"./App.css\";\r\nimport BookList from \"./components/BookList\";\r\nimport SearchPage from \"./components/SearchPage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { CoffeeLoading } from \"react-loadingg\";\r\nimport * as shelfNames from \"./utils/shelfNames\";\r\nclass BooksApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      books: {\r\n        currentlyReading: [],\r\n        wantToRead: [],\r\n        read: [],\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    booksAPI.getAll().then((resBooks) => {\r\n      this.setState(() => ({\r\n        books: {\r\n          currentlyReading: resBooks.filter(\r\n            (book) => book.shelf === shelfNames.CURRENTLY_READING\r\n          ),\r\n          wantToRead: resBooks.filter(\r\n            (book) => book.shelf === shelfNames.WANT_TO_READ\r\n          ),\r\n          read: resBooks.filter((book) => book.shelf === shelfNames.READ),\r\n        },\r\n      }));\r\n    });\r\n  }\r\n\r\n  changeShelf = (selectedBook, prevShelf, newShelf) => {\r\n    let newState = Object.assign({}, this.state);\r\n\r\n    newState.books[prevShelf].find(\r\n      (book) => book.id === selectedBook.id\r\n    ).shelf = newShelf;\r\n\r\n    newState.books[newShelf] = [...newState.books[newShelf], ...[selectedBook]];\r\n    newState.books[prevShelf] = newState.books[prevShelf].filter(\r\n      (book) => book.id !== selectedBook.id\r\n    );\r\n\r\n    this.setState(newState);\r\n    booksAPI.update(selectedBook, newShelf);\r\n  };\r\n\r\n  render() {\r\n    const { books } = this.state;\r\n    return books.currentlyReading.length !== 0 ||\r\n      books.wantToRead.length !== 0 ||\r\n      books.read.length !== 0 ? (\r\n      <div className=\"app\">\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <BookList books={this.state.books} changeShelf={this.changeShelf} />\r\n          )}\r\n        />\r\n        <Route exact path=\"/search\" render={() => <SearchPage />} />\r\n      </div>\r\n    ) : (\r\n      <div className=\"app\">\r\n        <CoffeeLoading />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp;\r\n","export const CURRENTLY_READING = \"currentlyReading\";\r\nexport const WANT_TO_READ = \"wantToRead\";\r\nexport const READ = \"read\";\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}